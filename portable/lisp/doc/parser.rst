Комбинаторный парсер
--------------------

Парсер - это функция, которая принимает на вход список объектов, выполняет разбор, возвращает список вариантов разбора или nil. Каждый вариант - это пара: результат разбора и остаток списка. nil в рeзультате означает неудачный разбор.
::

   parser :: lambda (list) -> [(res1 . rest1) ... (resn . restn)]

Элементарный парсер ожидает в списке заданный элемент.
::

   (defun parse-4-digit () (parse-elem 4)) ; ожидает 4
   (funcall parse-4-digit '(4 5 6)) ; возвращает ((4 . (5 6)))
   (funcall parse-4-digit '(3 5 6)) ; возвращает nil

Комбинатор parse-many позволяет разобрать 0 или более повторений заданного парсера. Результат разбора - список собранных значений.
::

   (funcall (parse-many (parse-elem 4)) '(1 2 3)) ; -> nil
   (funcall (parse-many (parse-elem 4)) '(4 2 3)) ; -> (((4) . (2 3)))
   (funcall (parse-many (parse-elem 4)) '(4 4 2 4 3)) ; -> (((4 4) . (2 4 3)))      

Разбор по предикату, предикат - функция, которая на вход получает символ, на выходе - nil или t.
Сама функция парсинга возвращает в результате парсинга в случае успешного разбора сам символ, в случае неудачного - nil.
::

   (funcall (parse-pred #'is-digit) '(#\2 s A)) ; -> ((#\2 . (s A)))
   (funcall (parse-pred #'is-digit) '(#\D 2 A)) ; -> nil

Последовательный комбинатор применяет несколько парсеров parsers подряд к списку, каждый следующий parser применяется к остатку от работы предыдущего parser.
Если все парсеры успешно отработали, то результат как список передается в указанную функцию transform
::

   (funcall (&&& #'(lambda (x) (cadr x)) (parse-elem #\() (parse-many (parse-atom)) (parse-elem #\)))
      (explode "(a b c d)"))
