(defvar p (char-code #\#))
(defvar im (make-image `#(#(,p ,p)
			  #(,p ,p))))
(defvar spr-im (make-image `#(#(49 49)
			      #(49 49))))
(defvar spr-im2 (make-image `#(#(43 43)
			       #(43 43))))

(defvar spr-alt-im (make-image `#(#(36 36)
				  #(36 36))))
(defvar empty (make-image #(#(0 0)
			    #(0 0))))
(defvar *background* #(#(WALL nil nil WALL WALL)
		       #(WALL nil nil WALL WALL)
		       #(WALL WALL WALL WALL WALL)))
(defvar *tiles-dictionary* `((WALL . ,im)
			     (nil . ,empty)))

(defun get-layers ()
  "Получить слой каждого спрайта из списка спрайтов"
  (app #'(lambda (spr) (print (sprite-layer spr))) *sprites*))

;(clear-screen)
(set-colour +light-gray+)
(set-tiles *tiles-dictionary*)
(set-tile-size (make-vec2 2 2))
(set-background *background*)
(setq spr (new-sprite spr-im (make-vec2 2 2) 2))
(setq spr2 (new-sprite spr-im2 (make-vec2 1 1) 3))
;(setq spr3 (new-sprite spr-alt-im (make-vec2 3 3) 1))
;(setq spr4 (new-sprite spr-im (make-vec2 0 3) 4))
;(setq spr5 (new-sprite spr-im2 (make-vec2 1 1) 4))
;(get-layers)
(draw-screen)
;(print *sprites*)
(delete-sprite spr2)
;(print *sprites*)
(draw-screen)
(set-sprite-pos spr (make-vec2 0 0))
(draw-screen)
;(set-sprite-pos spr (make-vec2 2 1))
(sprite-set-image spr spr-alt-im)
(draw-screen)
(set-sprite-pos spr (make-vec2 0 3))
(draw-screen)
